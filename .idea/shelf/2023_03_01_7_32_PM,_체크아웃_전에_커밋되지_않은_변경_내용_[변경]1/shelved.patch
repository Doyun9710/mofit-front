Index: src/components/MultiGame/Config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"phaser\";\nimport { isLeftPlayerThrow, isLeftPlayerMoveGuildLine, isRightPlayerThrow, isRightPlayerMoveGuildLine } from \"../openvidu/OpenviduComponent\";\n\n\nexport default class Main extends Phaser.Scene {\n  leftPlayer;\n  leftThrow;\n  leftThrowAngle = -45;\n  leftThrowLaunched = false;\n  leftGuildLine;\n  leftAngleLine;\n\n  leftDead;\n  leftPlayerHealthBar;\n  leftPlayerLife = 3;\n  leftPlayerAngleChange = 5;\n\n  rightPlayer;\n  rightThrow;\n  rightThrowAngle = -135;\n  rightThrowLaunched = false;\n  rightGuildLine;\n  rightAngleLine;\n\n  rightDead;\n  rightPlayerHealthBar;\n  rightPlayerLife = 3;\n  rightPlayerAngleChange = -5;\n\n\n\n  attackSpeed = 1000;\n\n  // 배경화면 설정\n  bg;\n  windowWidth = window.innerWidth;\n  windowHeight = window.innerHeight;\n  windBlowLeftToRight;\n  windBlowRightToLeft;\n\n\n  windSpeed = 0;\n  windTimeAgain = -1;\n  windGuide;\n  windText;\n  damageEffectOnLeft;\n  damageEffectOnRight;\n\n  //items\n  itemCreate;\n  shield;\n  shieldAble = false;\n  power;\n  powerAble = false;\n  windItem;\n  windItemAble = false;\n\n  constructor() {\n    super();\n  }\n\n\n\n\n\n  preload() {\n    // 스프라이트 삽입\n    // 시트이름, 시트경로, {frameWidth: 각 프레임의 가로길이, frameHeight : 세로길이}, 프레임개수\n    this.load.spritesheet(\n      \"knight\",\n      \"../assets/knight.png\",\n      { frameWidth: 128, frameHeight: 128 },\n      33\n    );\n    //캐릭터 죽음\n    this.load.spritesheet(\n        \"knightDead\",\n        \"../assets/knight_dead.png\",\n        { frameWidth: 256, frameHeight: 256 },\n        10\n    );\n\n    // 투사체 추가\n    this.load.spritesheet(\n      \"throwAttack\",\n      \"../assets/sword_attack.png\",\n      { frameWidth: 128, frameHeight: 128 },\n      18\n    );\n    //가이드라인 삽입\n    this.load.image('guildLine', '../assets/dot_line.png')\n    this.load.image('angleLine', '../assets/angleLine.png')\n\n    //배경화면\n    this.load.image('backGround','../assets/backgroundDungeon.png')\n\n    // 체력 바\n    this.load.spritesheet(\n      \"redHealthBar\",\n      \"../assets/healthbar/Redbar/redHealthBar.png\",\n      { frameWidth: 1406, frameHeight: 294 },\n      18\n    );\n\n    // 바람 추가\n    this.load.spritesheet(\n        \"wind\",\n        \"../assets/wind.png\",\n        { frameWidth: 512, frameHeight: 32 },\n        4\n    );\n\n    // 바람 화살표 추가\n    this.load.image('windGuide','../assets/arrow.png')\n\n    //데미지 이펙트 추가\n    this.load.spritesheet(\n        \"damageEffect\",\n        \"../assets/damage.png\",\n        { frameWidth: 458, frameHeight: 423 },\n        25\n    );\n\n  }\n\n\n\n\n\n\n\n\n  create() {\n    //배경 삽입\n    this.bg = this.add.image(0,0,'backGround').setOrigin(0,0)\n    this.bg.setDisplaySize(this.windowWidth, this.windowHeight);\n\n    // 캐릭터 설정\n    // 캐릭터 설정 Left\n    this.leftPlayer = this.physics.add\n      .sprite(300, 500, \"knight\",16)\n      .setScale(3);\n    this.leftPlayer.setOffset(14, 60).setBodySize(45, 50, false);\n\n    // 캐릭터 설정 Right\n    this.rightPlayer = this.physics.add\n      .sprite(1500, 500, \"knight\",16)\n      .setScale(3)\n      .toggleFlipX();\n    this.rightPlayer.setOffset(69, 60).setBodySize(45, 50, false);\n    // this.rightPlayer.setGravity(0, -200);\n\n\n    // 투사체 던지기 모션\n    this.anims.create({\n      key: \"throwAct\", //액션이름\n      frames: this.anims.generateFrameNumbers(\"throwAttack\", {\n        start: 0,\n        end: 9,\n      }), //프레임 불러오기 (불러올 스프라이트, 프레임)[1,2,3,4]\n      frameRate: 20, // 초당 프레임 개수\n      repeat: -1, // 0 : 한번만 반복\n    });\n\n\n    // 투사체 설정 Left\n    // 투사체를 생성하고 초기화합니다.\n    this.leftThrow = this.physics.add\n      .sprite(this.leftPlayer.x, this.leftPlayer.y, \"throwAttack\")\n      .setOrigin(0.5, 0.5);\n    // 안보이게 하기\n    this.leftThrow.visible = false;\n    this.leftThrow.setSize(10, 10); // 히트박스 조정\n\n\n    // 투사체 설정 Right\n    // 투사체를 생성하고 초기화합니다.\n    this.rightThrow = this.physics.add\n      .sprite(this.rightPlayer.x, this.rightPlayer.y, \"throwAttack\")\n      .setOrigin(0.5, 0.5)\n      .toggleFlipX();\n    // 안보이게 하기\n    this.rightThrow.visible = false;\n    this.rightThrow.setSize(10, 10);\n\n\n    // Attack Left to Right \n    this.physics.add.overlap(\n      this.rightPlayer,\n      this.leftThrow,\n      this.rightPlayerHitted,\n      null,\n      this\n    );\n    // Attack Right to Left \n    this.physics.add.overlap(\n      this.leftPlayer,\n      this.rightThrow,\n      this.leftPlayerHitted,\n      null,\n      this\n    );\n\n\n    // 가이드 선 Left\n    this.leftAngleLine = this.add.image(this.leftPlayer.x, this.leftPlayer.y, 'angleLine').setOrigin(0, 1).setScale(0.3)\n    this.leftGuildLine = this.add.image(this.leftPlayer.x, this.leftPlayer.y, 'guildLine').setOrigin(0, 0.5).setScale(0.3)\n    // 가이드 선 right\n    this.rightAngleLine = this.add.image(this.rightPlayer.x, this.rightPlayer.y, 'angleLine').setOrigin(1, 1).setScale(0.3).toggleFlipX();\n    this.rightGuildLine = this.add.image(this.rightPlayer.x, this.rightPlayer.y, 'guildLine').setOrigin(0, 0.5).setScale(0.3)\n\n\n    this.anims.create({\n      key: \"attackAct\", //액션이름\n      frames: this.anims.generateFrameNumbers(\"knight\", { start: 5, end: 11 }), //프레임 불러오기 (불러올 스프라이트, 프레임)[1,2,3,4]\n      frameRate: 10, // 초당 프레임 개수\n      repeat: 0, // 0 : 한번만 반복\n    });\n    this.anims.create({\n      key: \"run\",\n      frames: this.anims.generateFrameNumbers(\"knight\", { start: 17, end: 24 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n    this.anims.create({\n      key: \"walk\",\n      frames: this.anims.generateFrameNumbers(\"knight\", { start: 25, end: 30 }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"hurt\",\n      frames: this.anims.generateFrameNumbers(\"knight\", { start: 12, end: 15 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n    this.anims.create({\n      key: \"dead\",\n      frames: this.anims.generateFrameNumbers(\"knightDead\", { start: 0, end: 9 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n    // 애니메이션 Left\n    this.leftPlayer.on(\"animationcomplete\", () => {\n      this.leftPlayer.anims.play(\"walk\", true);\n    });\n    if (this.leftPlayer && this.leftPlayer.duration) {\n      this.leftPlayer.play(\"walk\", true);\n    }\n    // 애니메이션 Right\n    this.rightPlayer.on(\"animationcomplete\", () => {\n      this.rightPlayer.anims.play(\"walk\", true);\n    });\n    if (this.rightPlayer && this.rightPlayer.duration) {\n      this.rightPlayer.play(\"walk\", true);\n    }\n    // 콘솔키 설정\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n\n    // 캐릭터 health bar 설정 Left\n    this.leftPlayerHealthBar = this.add\n      .sprite(this.leftPlayer.x + 100, this.leftPlayer.y - 300, \"redHealthBar\")\n      .setScale(0.5)\n      .setOrigin(0.5, 0.5);\n    // this.leftPlayerHealthBar.setSize(10, 10);\n    // 캐릭터 health bar 설정 Right\n    this.rightPlayerHealthBar = this.add\n      .sprite(this.rightPlayer.x-100, this.rightPlayer.y - 300, \"redHealthBar\")\n      .setScale(0.5)\n      .setOrigin(0.5, 0.5);\n    // this.rightPlayerHealthBar.setSize(10, 10);\n    // 체력바 감소 애니메이션\n    \n    this.anims.create({\n      key: \"redHealthBar2\",\n      frames: this.anims.generateFrameNumbers(\"redHealthBar\", { start: 8, end: 7 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n\n    this.anims.create({\n      key: \"redHealthBar1\",\n      frames: this.anims.generateFrameNumbers(\"redHealthBar\", { start: 6, end: 4 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n\n    this.anims.create({\n      key: \"redHealthBar0\",\n      frames: this.anims.generateFrameNumbers(\"redHealthBar\", { start: 3, end: 1 }),\n      frameRate: 10,\n      repeat: 0,\n    });\n  //바람 만들기\n    this.windBlowLeftToRight = this.add\n        .sprite((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y, \"wind\" )\n        .setScale(5)\n        .setOrigin(0.5, 0.5)\n    this.windBlowLeftToRight.visible = false;\n\n    this.windBlowRightToLeft = this.add\n        .sprite((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y, \"wind\" )\n        .setScale(5)\n        .setOrigin(0.5, 0.5)\n        .toggleFlipX()\n    this.windBlowRightToLeft.visible = false;\n    this.anims.create({\n      key: \"windBlow\", //액션이름\n      frames: this.anims.generateFrameNumbers(\"wind\", { start: 0, end: 3 }), //프레임 불러오기 (불러올 스프라이트, 프레임)[1,2,3,4]\n      frameRate: 10, // 초당 프레임 개수\n      repeat: 3, // 0 : 한번만 반복\n    });\n\n    //바람 화살표\n    this.windGuide = this.add.image((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y-300,'windGuide')\n        .setScale(0.5)\n        .setOrigin(0.5, 0.5);\n\n    this.windText = this.add\n        .text((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y-200,\n            '',\n            { color: '#00acdc',fontSize : '48px'})\n        .setOrigin(0.5,0.5);\n\n    //데미지 이펙트\n    this.damageEffectOnRight = this.add\n        .sprite((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y, \"damageEffect\" )\n        .setScale(0.5)\n        .setOrigin(0.5, 0.5);\n    this.damageEffectOnRight.visible = false;\n    this.damageEffectOnLeft = this.add\n        .sprite((this.leftPlayer.x +this.rightPlayer.x)/2, this.rightPlayer.y, \"damageEffect\" )\n        .setScale(0.5)\n        .setOrigin(0.5, 0.5);\n    this.damageEffectOnLeft.visible = false;\n    this.anims.create({\n      key: \"damageEffectAct\", //액션이름\n      frames: this.anims.generateFrameNumbers(\"damageEffect\", { start: 0, end: 24 }), //프레임 불러오기 (불러올 스프라이트, 프레임)[1,2,3,4]\n      frameRate: 30, // 초당 프레임 개수\n      repeat: 0, // 0 : 한번만 반복\n    });\n\n\n\n  }\n\n\n\n\n\n  update() {\n    // this.physics.add.collider(this.rightPlayer, this.leftThrow, this.rightPlayerHit, null, this);\n    // this.rightPlayer.velocity = 0;\n    // 가이드 라인 리프레시\n    this.leftGuildLine.angle = this.leftThrowAngle;\n    this.rightGuildLine.angle = this.rightThrowAngle;\n    this.windTimeAgain -= 1\n    console.log(this.windTimeAgain)\n    if (this.windTimeAgain > 0) {\n      console.log(\"work\")\n      this.windTimeAgain = (Math.floor(Math.random()*(4-1))+1)*600\n      this.windSpeed = Math.floor((Math.floor(Math.random() * (6 - 1)) + 1) * (Math.random() - 0.5) * 200)\n      while (this.windSpeed === 0) {\n        this.windSpeed = Math.floor((Math.floor(Math.random() * (6 - 1)) + 1) * (Math.random() - 0.5) * 200)\n      }\n      console.log(this.windSpeed)\n      if(this.windSpeed > 0) {\n        this.windBlowLeftToRight.visible = true;\n        this.windBlowLeftToRight.anims.play('windBlow', true);\n        // if(this.windBlowLeftToRight && this.windBlowLeftToRight.duration) {\n        this.windBlowLeftToRight.on(\"animationcomplete\", () => {\n          this.windBlowLeftToRight.visible = false;\n        });\n\n      } else{\n        this.windBlowRightToLeft.visible = true;\n        this.windBlowRightToLeft.anims.play('windBlow', true);\n        // if(this.windBlowRightToLeft && this.windBlowLeftToRight.duration) {\n        this.windBlowRightToLeft.on(\"animationcomplete\", () => {\n        this.windBlowRightToLeft.visible = false;\n        });\n      }\n    }\n    if (this.windSpeed > 0) {\n      this.windGuide.angle = 0;\n    } else this.windGuide.angle = -180;\n    let windNotice = this.windSpeed\n    this.windText.text = `${Math.abs(windNotice)}m`\n\n    // 각도 조절 Left\n    if (this.cursors.up.isDown || isLeftPlayerMoveGuildLine == true) {\n      this.leftPlayer.anims.play(\"run\", true);\n      this.leftThrowAngle -= this.leftPlayerAngleChange;\n      if (this.leftThrowAngle <= -90 || this.leftThrowAngle >= 0) {\n        this.leftPlayerAngleChange *= -1\n      }\n    }\n\n    // 각도 조절 Right\n    if (this.cursors.left.isDown || isRightPlayerMoveGuildLine == true) {\n      this.rightPlayer.anims.play(\"run\", true);\n      this.rightThrowAngle -= this.rightPlayerAngleChange;\n      if (this.rightThrowAngle <= -180 || this.rightThrowAngle >= -90) {\n        this.rightPlayerAngleChange *= -1\n      }\n    }\n\n\n\n\n    // 스페이스바가 눌린 경우 투사체를 발사합니다.\n    // 투사체 발사, 공격모션 Left\n    if (\n      (Phaser.Input.Keyboard.JustDown(this.cursors.space) || isLeftPlayerThrow == true) &&\n      !this.leftThrowLaunched\n    ) {\n      this.leftPlayer.anims.play(\"attackAct\", true);\n\n      this.leftThrowLaunched = true;\n\n      // 투사체를 보이게 하고 초기 속도와 각도를 설정합니다.\n      this.leftThrow.visible = true;\n      this.leftThrow.anims.play(\"throwAct\", true);\n      this.physics.velocityFromAngle(\n        this.leftThrowAngle,\n        this.attackSpeed,\n        this.leftThrow.body.velocity\n      );\n      this.leftThrow.body.velocity.x += this.windSpeed\n      this.leftThrow.setGravity(0, 830);\n      // this.leftThrow.body.velocity.x += -200;\n      // console.log(this.leftThrowAngle, this.attackSpeed);\n    }\n\n    // 투사체 발사, 공격모션 right\n    if (\n      (Phaser.Input.Keyboard.JustDown(this.cursors.shift) || isRightPlayerThrow == true) &&\n      !this.rightThrowLaunched\n    ) {\n      this.rightPlayer.anims.play(\"attackAct\", true);\n\n      this.rightThrowLaunched = true;\n\n      // 투사체를 보이게 하고 초기 속도와 각도를 설정합니다.\n      this.rightThrow.visible = true;\n      this.rightThrow.anims.play(\"throwAct\", true);\n      this.physics.velocityFromAngle(\n        this.rightThrowAngle,\n        this.attackSpeed,\n        this.rightThrow.body.velocity\n      );\n      this.rightThrow.body.velocity.x += this.windSpeed\n      this.rightThrow.setGravity(0, 830);\n      // this.rightThrow.body.velocity.x += -200;\n      console.log(this.rightThrowAngle, this.attackSpeed);\n    }\n\n\n    // 화면 밖으로 나가면 투사체 초기화 Left\n    if (\n      this.leftThrow.y > 600 ||\n      // this.leftThrow.y < 0 ||\n      this.leftThrow.x > 1700 ||\n      this.leftThrow.x < 0\n    ) {\n      this.leftThrow.setGravity(0);\n      this.leftThrowLaunched = false;\n      this.leftThrow.body.stop();\n      this.leftThrow.x = this.leftPlayer.x;\n      this.leftThrow.y = this.leftPlayer.y;\n      this.leftThrow.visible = false;\n    }\n\n    // 화면 밖으로 나가면 투사체 초기화 Right\n    if (\n      this.rightThrow.y > 600 ||\n      // this.rightThrow.y < 0 ||\n      this.rightThrow.x > 1700 ||\n      this.rightThrow.x < 0\n    ) {\n      this.rightThrow.setGravity(0);\n      this.rightThrowLaunched = false;\n      this.rightThrow.body.stop();\n      this.rightThrow.x = this.rightPlayer.x;\n      this.rightThrow.y = this.rightPlayer.y;\n      this.rightThrow.visible = false;\n    }\n\n  }\n\n\n  // Right Hitted\n  rightPlayerHitted() {\n    this.rightPlayer.anims.play('hurt', true)\n    this.damageEffectOnRight.x = this.leftThrow.x;\n    this.damageEffectOnRight.y = this.leftThrow.y;\n    this.damageEffectOnRight.visible = true;\n    this.damageEffectOnRight.play('damageEffectAct')\n    // if(this.windBlowRightToLeft && this.windBlowLeftToRight.duration) {\n    this.damageEffectOnRight.on(\"animationcomplete\", () => {\n      this.damageEffectOnRight.visible = false;\n    });\n\n    this.leftThrow.setGravity(0);\n    this.leftThrowLaunched = false;\n    this.leftThrow.body.stop();\n    this.leftThrow.x = this.leftPlayer.x;\n    this.leftThrow.y = this.leftPlayer.y;\n    this.leftThrow.visible = false;\n\n    this.rightPlayerLife -= 1;\n\n    if (this.rightPlayerLife == 2) {\n      this.rightPlayerHealthBar.anims.play('redHealthBar2', true);\n      console.log(\"Right Player : \" + this.rightPlayerLife);\n    }\n    else if (this.rightPlayerLife == 1) {\n      this.rightPlayerHealthBar.anims.play('redHealthBar1', true);\n      console.log(this.rightPlayerLife);\n    }\n    else if (this.rightPlayerLife == 0) {\n      this.rightPlayerHealthBar.anims.play('redHealthBar0', true);\n      console.log(this.rightPlayerLife);\n      this.leftPlayerWin();\n    }\n  }\n  // left Hitted\n  leftPlayerHitted() {\n    this.leftPlayer.anims.play('hurt', true)\n    this.damageEffectOnLeft.x = this.rightThrow.x;\n    this.damageEffectOnLeft.y = this.rightThrow.y;\n    this.damageEffectOnLeft.visible = true;\n    this.damageEffectOnLeft.play('damageEffectAct')\n    // if(this.windBlowRightToLeft && this.windBlowLeftToRight.duration) {\n    this.damageEffectOnLeft.on(\"animationcomplete\", () => {\n      this.damageEffectOnLeft.visible = false;\n    });\n    this.rightThrow.setGravity(0);\n    this.rightThrowLaunched = false;\n    this.rightThrow.body.stop();\n    this.rightThrow.x = this.rightPlayer.x;\n    this.rightThrow.y = this.rightPlayer.y;\n    this.rightThrow.visible = false;\n\n    // Left Player Life Count\n    this.leftPlayerLife -= 1;\n\n    if (this.leftPlayerLife == 2) {\n      this.leftPlayerHealthBar.anims.play('redHealthBar2', true);\n      console.log(this.leftPlayerLife);\n    }\n    else if (this.leftPlayerLife == 1) {\n      this.leftPlayerHealthBar.anims.play('redHealthBar1', true);\n      console.log(this.leftPlayerLife);\n    }\n    else if (this.leftPlayerLife == 0) {\n      this.leftPlayerHealthBar.anims.play('redHealthBar0', true);\n      console.log(this.leftPlayerLife);\n      this.rightPlayerWin();\n    }\n  }\n\n  // Left Player 승리 시 호출\n  leftPlayerWin() {\n    setTimeout(function() {\n      alert(\"Left Player Win !!!\");\n    }, 1000);\n  }\n\n  // Right Player 승리 시 호출\n  rightPlayerWin() {\n    setTimeout(function() {\n      alert(\"Right Player Win !!!\");\n    }, 1000);\n  }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/MultiGame/Config.js b/src/components/MultiGame/Config.js
--- a/src/components/MultiGame/Config.js	
+++ b/src/components/MultiGame/Config.js	
@@ -121,6 +121,9 @@
         25
     );
 
+    //아이템 3개 추가
+
+
   }
 
 
